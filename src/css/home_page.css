/* Display properties with 'inline' prefix (E.g. inline-block, inline-flex, inline-table and so on)  
allows setting of width, height, padding and margin properties, but inline alone does not. So, 
inline-block aligns items horizontally just like inline, but with inline-block, you can set 
width, height, padding and margin properties, but can't do so for inline alone.     
*/

/*
1. inline = horizontal arrangement, without width, height, padding and margin properties
2. inline-block = horizontal arrangement, with width, height, padding and margin properties
3. block = vertical arragement, with width, height, padding and margin properties
4. flex = for flexible arrangement of elements horizontally or vertically, so as to span out 
completely in the parent container in the laid out direction, just like the weight property 
in Android with zero (0) width or height. To use the flex display property, set display: flex
for the container element (E.g. div) and set flex-direction to column or row.          
*/

/* Extra small devices (phones, 600px and down) */
@media only screen and (max-width: 600px) {
            
}

/* Small devices (portrait tablets and large phones, 600px and up) */
@media only screen and (min-width: 600px) {
                
}

/* Medium devices (landscape tablets, 768px and up) */
@media only screen and (min-width: 768px) {

}

/* Large devices (laptops/desktops, 992px and up) */
@media only screen and (min-width: 992px) {

}

/* Extra large devices (large laptops and desktops, 1200px and up) */
@media only screen and (min-width: 1200px) {

}

.homePage::-webkit-scrollbar { 
    display: none;  
}

.homePage {
	font-size: calc(10px + 2vmin);
	-ms-overflow-style: none; 
	flex-direction: column;
	scrollbar-width: none; 
	background: #E5E7E9;
	color: #1C2833;
	display: flex;
	height: 100vh;
	width: 100vw;
}

* { 
	-moz-box-sizing: border-box; 
  	-webkit-box-sizing: border-box; 
  	box-sizing: border-box; 
}
    
    
